<?php

namespace Alfitra\CptBundle\Repository;

/**
 * DonateursRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DonateursRepository extends \Doctrine\ORM\EntityRepository
{
	// Total des dons
    public function getTotalDefis($id_evt) {
        $query = $this->createQueryBuilder('d');
        $query->select('sum(d.montant)')
              ->where('d.evenement = :id_evt')
              ->setParameter('id_evt', $id_evt);
        
        return $query->getQuery()->getSingleScalarResult();
    }	

	// Total des dons via CB
    public function getTotalCB($id_evt) {
        $query = $this->createQueryBuilder('d');
        $query->select('sum(d.montant)')
              ->where('d.evenement = :id_evt and d.moyenDePaiement = :visa')
              ->setParameter('id_evt', $id_evt)
              ->setParameter('visa', 'Visa');
        
        return $query->getQuery()->getSingleScalarResult();
    }


	// Total des dons en cash
    public function getTotalCash($id_evt) {
        $query = $this->createQueryBuilder('d');
        $query->select('sum(d.montant)')
              ->where('d.evenement = :id_evt and d.moyenDePaiement = :cash')
              ->setParameter('id_evt', $id_evt)
              ->setParameter('cash', 'Cash');
        
        return $query->getQuery()->getSingleScalarResult();
    }

  	/**
  	 * @return 
  	 */
  	public function findLastInsert()
  	{
  	    $query = $this->createQueryBuilder('d')
  	        ->select('d')
  	        ->orderBy('d.id', 'desc')
  	        ->setMaxResults(1);
  	   return $query->getQuery()->getOneOrNullResult();
  	}

  	public function getMax($id_evt){
  		$query = $this->createQueryBuilder('d')
  			  ->select('max(d.montant)')
                ->where('d.evenement = :id_evt')
                ->setParameter('id_evt', $id_evt);
          
      return $query->getQuery()->getSingleScalarResult();

  	}

  	public function getNb($id_evt){
  		$query = $this->createQueryBuilder('d')
  			  ->select('count(d.montant)')
                ->where('d.evenement = :id_evt')
                ->setParameter('id_evt', $id_evt);
          
      return $query->getQuery()->getSingleScalarResult();

  	}

    public function getDonsCollecte($id_Collecteur){
      $query = $this->createQueryBuilder('d');
      $query->select('sum(d.montant)')
            ->where('d.collecteur = :id_Collecteur')
            ->setParameter('id_Collecteur',$id_Collecteur);
      return $query->getQuery()->getSingleScalarResult();
    }

    public function getDonsCollectes(){
      $query = $this->createQueryBuilder('d');
      $query->select('sum(d.montant)')
            ->groupBy('d.collecteur');
      return $query->getQuery()->getResult();
    }

    
    public function getDonsByDaysAndHours($day) {
        $query = $this->createQueryBuilder('d');
        $query->select('sum(d.montant) as nb, SUBSTRING(d.date, 12, 2) as hour, d.moyenDePaiement as type')
                ->where('SUBSTRING(d.date, 9, 2) = :day')
                ->groupBy('hour,type')
                ->orderBy('hour','ASC')
                ->setParameter('day', $day);

        return $query->getQuery()->getArrayResult();
    }

}
